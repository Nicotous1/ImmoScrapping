# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test, Build and Deploy to Lambda

on:
    push:
        branches: ["prod"]

env:
    AWS_REGION: "eu-west-3"
    ECR_REPOSITORY: "immo_scrap"
    PYTHON_VERSION: 3.9

jobs:
    test:
        name: Testing ImmoScrap
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python ${{ env.PYTHON_VERSION }}
              uses: actions/setup-python@v3
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
            - name: Install ImmoScrap
              run: |
                  python -m pip install .
            - name: Install Test Dependencies
              run: |
                  python -m pip install -r requirements_dev.txt
            - name: Test with pytest
              run: |
                  pytest

    build_deploy:
        name: Build and Deploy Lambda Image
        runs-on: ubuntu-latest
        environment: production
        needs: test

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Update lambda image
              uses: appleboy/lambda-action@master
              with:
                  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws_region: ${{ env.AWS_REGION }}
                  function_name: ImmoScrap
                  image_uri: ${{ steps.build-image.outputs.image }}
